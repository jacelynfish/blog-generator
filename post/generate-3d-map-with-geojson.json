{"meta":{"title":"Three.js空间地理可视化：3D行政区域图开发","date":"2018-10-14 11:37:59","tags":["data visualization","mapbox"],"categories":["JavaScript"]},"content":"<p>好久没填坑了呀……从毕设到校招培训，感觉这半年一直横冲直撞没啥沉淀，只要项目来需求撸起袖子就肝【。这个月一直在学可视化开发，Three.js 和 Echarts、D3 都略有接触了，今天就讲讲空间地理可视化的一些经验吧~ 💃🏻💃🏻💃🏻</p>\n<blockquote>\n<p>位置数据的最大好处就在于它与现实世界的联系。 —— N. Yau《数据之美》</p>\n</blockquote>\n<p>在数据可视化的过程中，使用地理坐标系来映射具体位置数据能增强数据背后的环境信息和关联信息，使读者能快速总览某一区域的情况，同时也能聚焦在她/他最关心的某一范围。而在可视化数据大屏的实践里，空间可视化因其宏观、酷炫的效果而常常作为大屏底图，如在 3D 地球或 2D 地图瓦片的基础上，加上热力图、飞线等效果，以更好地展示跨地理区域的数据。本文将会介绍如何通过使用 <a href=\"https://threejs.org/\">Three.js</a> 和 <a href=\"https://github.com/d3/d3-geo\">d3-geo</a> 将 Geojson 这种地理数据文件来渲染 WebGL 3D 行政区域图。</p>\n<!-- more -->\n<h2>基本思路</h2>\n<p>本文会着重介绍通过 Geojson 绘制 WebGL 的 3D 行政区域图，关于 Three.js 的场景搭建、raycasting 等会略过~主要有一下几个步骤：</p>\n<ol>\n<li>通过 Geojson 生成 SVG 路径，也就是用在 SVG <code>&lt;path&gt;</code> 标签里的 <code>d</code> 属性值；</li>\n<li>将 SVG 路径生成 Three.js <a href=\"https://threejs.org/docs/index.html#api/en/extras/core/ShapePath\"><code>ShapePath</code></a> 对象，用于创建 <a href=\"https://threejs.org/docs/index.html#api/en/geometries/ExtrudeGeometry\"><code>ExtrudeGeometry</code></a> 通过拉伸 2D 平面形状到有高度的 3D 立体图形；</li>\n<li>作 SVG 坐标系统到 Three.js\b \b 中右手坐标系的 \b 矩阵变换。</li>\n</ol>\n<p>进入正文之前，先看一下 \b 完整代码和渲染效果八~</p>\n<iframe height='356' scrolling='no' title='Geojson2threeDMap' src='//codepen.io/jacelynfish/embed/JmygbR/?height=356&theme-id=light&default-tab=js,result' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/jacelynfish/pen/JmygbR/'>Geojson2threeDMap</a> by JacelynFish (<a href='https://codepen.io/jacelynfish'>@jacelynfish</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n<h2>使用 Geojson 生成 SVG 路径</h2>\n<blockquote>\n<p>地理信息可可视化的最基本步骤是地图投影，即将数据中的地理坐标转换到二维的屏幕坐标。讲一个不可展平曲面上位置映射到二维平面，等价于曲面参数化。—— 陈为《数据可视化》</p>\n</blockquote>\n<p>\b 在获得 Geojson 数据后，我们首先需要将经纬度数据一一映射到屏幕坐标系上。d3-geo 不仅提供了包括 Mercator、Albers 等坐标转换方法，更提供了投影时常用的位移、自定义面积适应等方法，在这里我们选择使用墨卡托投影（Mercator Projection）。</p>\n<p>墨卡托投影又称正轴等角圆柱投影，有投影等角度的特点，即投影面上任何点上两个微分线段组成的角度投影前后保持不变。该方法用一个与地轴方向一致的圆柱切割地球，并按等角度条件，将地球的经纬网投影到圆柱面上。将圆柱面展平后，获得墨卡托投影后的地图。相邻纬线之间的距离由赤道向两级增加，在赤道上的对象保持原始的面积，越远离赤道面积变形越大。</p>\n<p><img src=\"/images/generate-3d-map-with-geojson/mercator2.gif\" alt=\"mercator_projection\"></p>\n<p>由于我们选取广东的纬度较接近赤道，因此投影出来的面积形状形变不会特别 \b 明显，\b 比较接近实际情况。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">let</span> mercator = d3\n  .geoMercator()\n  .rotate([<span class=\"hljs-number\">-150</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>])\n  .fitSize([fitExtent, fitExtent], geojson)\n  .precision(<span class=\"hljs-number\">0.6</span>);\n<span class=\"hljs-keyword\">let</span> projection = d3.geoPath(mercator);\n</code></pre>\n<p>使用 <code>d3.geoMercator()</code> 方法我们创建了墨卡托投影。<code>rotate([angles])</code> 方法 \b 让我们在投影前 \b 对起始经纬度做一个旋转，如我们就在变换前经度上旋转了 150°，使中国大致处于当前地图中心。<code>fitSize(size, object)</code> 对投影后的平面地图进行缩放和位移，将传入的 Geojson <code>object</code> 的投影面积自动按原比例缩放为 <code>size[0] * size[1]</code>。如果不使用自定义的缩放相关方法，d3 会使用默认 scale，而每个投影方法的默认 scale 都不尽一样。默认 scale 将你的目标地理范围放在全球面积的角度来投影，导致投影出来只有一个小点（如下图）= =。除了 <code>fitSize()</code> 或 <code>fitExtent()</code>，你还可以使用 <code>transform.center().scale().translate()</code> 等一系列方法自定缩放、位移的效果，具体用法可以查看 <a href=\"https://github.com/d3/d3-geo\">d3-geo 相关文档</a>。\n<img src=\"/images/generate-3d-map-with-geojson/fit_comparation.png\" alt=\"fit_comapration\"></p>\n<p>获得投影方法后，就可以正式将 Geojson 的特征数据集转换为 SVG 路径了并同时生成 Three.js 的 <code>ShapePath</code> 对象，用于之后拉伸为立体图形。在这个过程中我们将会使用到《ThreeJS 开发指南》的作者开发的 <a href=\"https://github.com/asutherland/d3-threeD\">d3threeD</a> 这个小工具，主要是对 SVG 路径字符串解码，将常用 path 命令转换为 \bThree.js 中相应的路径操作函数。</p>\n<p>但这个 \b 库年久失修（……），没办法处理用科学计数法表示的一些小数和命令（如小写字母 a），也只支持 <code>Shape</code> 对象（<code>ShapePath</code> 区分洞孔，可以更自由地转化为 <code>Shape</code>），因此参考<a href=\"https://threejs.org/examples/?q=shape#webgl_geometry_extrude_shapes2\">官方示例</a>我对这个库做了一些<a href=\"https://jacelyn.fish/lib/modules/d3threeD.js\">个人修改</a>。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// https://jacelyn.fish/lib/modules/d3threeD.js</span>\n\n<span class=\"hljs-comment\">// 检测由科学计数法表示的小数，一般路径中如果出现这种数字都是及其接近0，误差可以忽略，直接替换为0.0</span>\n<span class=\"hljs-keyword\">const</span> pathPattern = <span class=\"hljs-regexp\">/\\-?\\d+(\\.\\d+)?e\\-?\\d+/g</span>;\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">d3threeD</span>(<span class=\"hljs-params\">exports</span>) </span>{\n    <span class=\"hljs-comment\">// ...</span>\n    exports.transformSVGPath = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">transformSVGPath</span>(<span class=\"hljs-params\">_pathStr</span>) </span>{\n        <span class=\"hljs-keyword\">let</span> pathStr = _pathStr.replace(pathPattern, <span class=\"hljs-string\">'0.0'</span>)\n        <span class=\"hljs-keyword\">var</span> path = <span class=\"hljs-keyword\">new</span> THREE.ShapePath(); <span class=\"hljs-comment\">// 使用 ShapePath</span>\n        <span class=\"hljs-keyword\">var</span> idx = <span class=\"hljs-number\">1</span>,\n        len = pathStr.length,\n        <span class=\"hljs-comment\">//...</span>\n    }\n}\n</code></pre>\n<p>在 <code>drawGeoSVG</code> 方法中，使用 Geojson 生成 <code>shapes</code> 数组，每项都包括本身的经纬度数据、中心点相对当前 <code>Shape</code> 的距离（以便后续打点）和 <code>Shape</code> 对象本身。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">let</span> _d3threeD = {};\nd3threeD(_d3threeD);\ntransformSVGPath = _d3threeD.transformSVGPath;\n\n<span class=\"hljs-comment\">// drawGeoSVG() line 49 - 78</span>\n<span class=\"hljs-keyword\">let</span> shapes = [];\ngeojson.features.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">feature</span> =&gt;</span> {\n  <span class=\"hljs-keyword\">let</span> path = projection(feature);\n  <span class=\"hljs-keyword\">if</span> (path) {\n    <span class=\"hljs-comment\">// 这里必要检测 path \b是否为 undefined，\b因为之前使用了自定义缩放，在给定的 fitExtent \b距离外的 feature 会生成 undefined</span>\n    <span class=\"hljs-keyword\">try</span> {\n      <span class=\"hljs-keyword\">let</span> _path = transformSVGPath(path); <span class=\"hljs-comment\">// 生成 ShapePath</span>\n      <span class=\"hljs-keyword\">let</span> _shapes = _path.toShapes(<span class=\"hljs-literal\">false</span>, <span class=\"hljs-literal\">false</span>); <span class=\"hljs-comment\">// 用 .toShapes 方法将 ShapePath 转换为 Shape</span>\n      shapes.push({\n        <span class=\"hljs-attr\">data</span>: <span class=\"hljs-built_in\">Object</span>.assign(feature.properties, {\n          <span class=\"hljs-attr\">centroid</span>: projection.centroid(feature) <span class=\"hljs-comment\">// 当前 feature 的中心点相对距离x,y，\b单位像素</span>\n        }),\n        _shapes\n      });\n    } <span class=\"hljs-keyword\">catch</span> (e) {\n      <span class=\"hljs-built_in\">console</span>.log(e);\n    }\n  }\n});\n</code></pre>\n<p><code>drawGeoSVG</code> 返回的 <code>shapes</code> 数组就是之后拉伸立体图形和 \b 采样描绘轮廓的基础啦~</p>\n<h2>轮廓描边和 \b3D 拉伸深度</h2>\n<h3>轮廓描边</h3>\n<p>绘制轮廓的逻辑其实很直白，就是在 <code>Shape</code> 路径中采样并将点集生成 <code>THREE.Line</code> 对象即可。生成的轮廓不用马上添加到场景里，而是添加到之后生成的、各自所属的立体图形中。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">drawOutlines</span>(<span class=\"hljs-params\">shapes</span>) </span>{\n  <span class=\"hljs-comment\">// line 130- 156</span>\n  <span class=\"hljs-keyword\">let</span> outlines = [];\n  shapes.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> {\n    <span class=\"hljs-keyword\">let</span> lines = <span class=\"hljs-keyword\">new</span> THREE.Group(); <span class=\"hljs-comment\">// 一个行政区可能会有多个闭合形状</span>\n    lines.userData.name = <span class=\"hljs-string\">'Administrative Lines'</span>;\n    item._shapes.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">shape</span> =&gt;</span> {\n      <span class=\"hljs-keyword\">let</span> pts = shape.getPoints();\n      <span class=\"hljs-keyword\">let</span> line = <span class=\"hljs-keyword\">new</span> THREE.Line(\n        <span class=\"hljs-keyword\">new</span> THREE.Geometry(),\n        <span class=\"hljs-keyword\">new</span> THREE.LineBasicMaterial({\n          <span class=\"hljs-attr\">color</span>: highLightColor\n        })\n      );\n      pts.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">pt</span> =&gt;</span> {\n        line.geometry.vertices.push(<span class=\"hljs-keyword\">new</span> THREE.Vector3(pt.x, pt.y, <span class=\"hljs-number\">0</span>));\n        line.geometry.colors.push(highLightColor);\n      });\n      lines.add(line);\n    });\n    outlines.push(lines);\n  });\n  <span class=\"hljs-keyword\">return</span> outlines;\n}\n</code></pre>\n<h3>立体拉伸</h3>\n<p><code>THREE.ExtrudeGeometry()</code> 接收 <code>Shape</code> 或者 <code>Shape</code> 数组，通过增加深度的方式拉伸平面图形为立体几何。乍看上去十分方便，直接传入 <code>{ depth: 50 }</code> 这样的配置就可得到自己想要的高度。但是仔细一想，这样直接生成的几何体顶点 vertices 的值都是固定的，如果需要实现，如示例般交互动态改变拉伸长度，就需要手动管理 <code>geometry.vertices</code> 这些成千上万个顶点的位置，如果结合材质，还要更新计算 \bUV mapping（😨 听起来就很累人……\b</p>\n<p>这时候就可以转换一下思维啦：想要改变物体的形状，除了计算集合本身的顶点位置，还有什么其他方法呢？参考官方示例里的大量动画效果，如 autoRotate 等，都是在每一轮渲染循环里直接改变 Mesh 的 <code>rotation</code> 属性！以此类推，动态改变长度是不是可以直接 \b 修改某一轴 <code>scale</code> 属性呢嘻嘻嘻 👻</p>\n<p>因此，我们可以在创建一个深度为 1 的拉伸几何体并创建网格对象后，通过修改该 <code>Mesh</code> 的 <code>scale.z</code> 值实现动态拉伸的效果~</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">let</span> group = <span class=\"hljs-keyword\">new</span> THREE.Group(); <span class=\"hljs-comment\">// 将所有子行政区集合到一个 Group 中以便后续统一矩阵变换</span>\n\n<span class=\"hljs-comment\">// drawProvince(shapes, outlines) line 80 - 128</span>\nshapes.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">item, i</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">let</span> geometry = <span class=\"hljs-keyword\">new</span> THREE.Geometry();\n  item._shapes.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">shape</span> =&gt;</span> {\n    <span class=\"hljs-comment\">// 创建一个深度为 1 的拉伸几何体</span>\n    <span class=\"hljs-keyword\">let</span> extrude = <span class=\"hljs-keyword\">new</span> THREE.ExtrudeGeometry(\n      shape,\n      <span class=\"hljs-built_in\">Object</span>.assign({ <span class=\"hljs-attr\">depth</span>: <span class=\"hljs-number\">1</span> }, extrudeOpts)\n    );\n    <span class=\"hljs-comment\">// 一个相同的行政区域可能会在形状上分割成很多闭合的部分，</span>\n    <span class=\"hljs-comment\">// 用 geometry.merge()方法聚合同一个行政区的几何形状</span>\n    geometry.merge(extrude);\n  });\n  <span class=\"hljs-keyword\">let</span> mesh = <span class=\"hljs-keyword\">new</span> THREE.Mesh(geometry, <span class=\"hljs-keyword\">new</span> THREE.MeshNormalMaterial({}));\n  mesh.add(outlines[i]); <span class=\"hljs-comment\">// 将之前绘制的行政区域轮廓添加为网格的子元素</span>\n\n  <span class=\"hljs-keyword\">let</span> scaleZ = minExtrude; <span class=\"hljs-comment\">// 初始拉伸长度</span>\n  mesh.scale.set(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, scaleZ); <span class=\"hljs-comment\">// 拉伸Z轴实现立体效果</span>\n  mesh.position.z = -scaleZ; <span class=\"hljs-comment\">// 同时也往Z轴负方向位移相应距离</span>\n  outlines[i].position.z = <span class=\"hljs-number\">-1</span> / scaleZ; <span class=\"hljs-comment\">// 解决轮廓闪烁问题</span>\n  mesh.userData = item.data;\n  group.add(mesh);\n});\n</code></pre>\n<p>注意在 16 行里我们将之前绘制的行政区域轮廓添加为相应网格的子元素，这能使轮廓和网格成为一个整体，<strong>随后的拉伸和位移会应用到这个整体上</strong>。另外，由于上一小节中的轮廓因为开启了 depthBuffer 检测，如果轮廓和网格表面在 z 轴同一位置上会出现闪烁的 bug，需要将轮廓位移到网格的 1px 外。因现在 \b 轮廓所在的本地坐标 Z 轴已经被扩大了了 <code>scaleZ</code> 倍，因此需要手动缩小响应倍数。</p>\n<p>此时，只要改变相应网格的 <code>scale.z</code> 就可以动态改变几何体的高度啦~在这个例子里我们使用的是 raycasting，鼠标移过的区域会动态随机高度和改变材质颜色，并在中心位置出现地名标签。通过 Tween.js 为高度过渡实现了动画，让交互过程更自然~</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">changeGroupHeight</span>(<span class=\"hljs-params\">mesh, height</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> scaleZ = { <span class=\"hljs-attr\">z</span>: mesh.scale.z };\n  <span class=\"hljs-keyword\">let</span> isComplete = <span class=\"hljs-literal\">false</span>;\n\n  <span class=\"hljs-keyword\">let</span> tween = <span class=\"hljs-keyword\">new</span> TWEEN.Tween(scaleZ)\n    .to({ <span class=\"hljs-attr\">z</span>: height }, <span class=\"hljs-number\">800</span>)\n    .easing(TWEEN.Easing.Quartic.Out)\n    .onUpdate(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n      <span class=\"hljs-comment\">// 通过改变z轴拉伸范围来修改几何体的高度</span>\n      mesh.scale.set(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, scaleZ.z);\n      mesh.position.z = -scaleZ.z;\n      mesh.children[<span class=\"hljs-number\">0</span>].position.z = <span class=\"hljs-number\">-1</span> / scaleZ.z;\n    })\n    .onComplete(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n      isComplete = <span class=\"hljs-literal\">true</span>;\n    });\n  <span class=\"hljs-keyword\">let</span> update = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n    TWEEN.update();\n    !isComplete &amp;&amp; requestAnimationFrame(update);\n  };\n  tween.start();\n  update();\n}\n</code></pre>\n<p><img src=\"/images/generate-3d-map-with-geojson/upside_down.png\" alt=\"upside_down\"></p>\n<p>看起来效果还不错呢~只是……还有一个<em>小</em>问题：为啥整个图是反过来的啊啊啊？？？🙄</p>\n<h3>坐标转换</h3>\n<p>到目前为止，绘制出来的行政图 Y 轴方向相反的原因其实是 WebGL 和 SVG 坐标系统未做转换的问题。如图所示，在 WebGL 中的世界坐标系使用的是右手坐标系（Right Handed Coordinate System）Y 轴正方向指向<strong>上</strong>；而 SVG 使用的坐标系统跟 Canvas 类似的视口坐标系，视口左上角为原点(0, 0)，Y 轴正方向为<strong>下</strong>。\n<img src=\"/images/generate-3d-map-with-geojson/coordinate_system.png\" alt=\"coordinate_system\">在这个映射的过程中，若是直接将 d3threeD 生成的 <code>Shape</code> 直接放置入场景中，必定会出现纵坐标相反的问题。\n<img src=\"/images/generate-3d-map-with-geojson/coordinate_transform.png\" alt=\"coordinate_transform\"> 这时便需要对整个 3D 图形 <code>group</code> 实现坐标变换。在这个过程中我们直接使用矩阵同时实现 Y 轴和 Z 轴的翻转和中心点位移。关于矩阵转换可以参考<a href=\"https://webglfundamentals.org/webgl/lessons/webgl-3d-orthographic.html\">这篇教程</a>。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getPosMat</span>(<span class=\"hljs-params\">x, y, z</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> posMat = <span class=\"hljs-keyword\">new</span> THREE.Matrix4();\n  <span class=\"hljs-comment\">// rotateZ(Math.PI)</span>\n  <span class=\"hljs-comment\">// rotateY(Math.PI)</span>\n  posMat.set(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, x, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">0</span>, y, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">-1</span>, z, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>);\n  <span class=\"hljs-keyword\">return</span> posMat;\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">drawProvince</span>(<span class=\"hljs-params\">shapes, outlines</span>) </span>{\n  <span class=\"hljs-comment\">// x 和 y 分别位移 fitExtent / 2 的位置至原点</span>\n  <span class=\"hljs-keyword\">let</span> posMat = getPosMat(-fitExtent / <span class=\"hljs-number\">2</span>, fitExtent / <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>);\n\n  <span class=\"hljs-comment\">// ... 上述的绘制立体图形逻辑</span>\n\n  group.applyMatrix(posMat); <span class=\"hljs-comment\">// 整个立体图形整体翻转和位移</span>\n  scene.add(group);\n}\n</code></pre>\n<p>这样就能得到一个位于 WebGL 坐标轴原点的立体地理图形啦~🤓</p>\n<h2>中心标签打点</h2>\n<p>很多第三方库在实现文字打点的时会直接在 WebGL 中渲染文字，但这种方案生成的文字标签也是一个 3D 元素，如果不进行特殊大小处理，会随镜头的拉伸有很明显的缩放；同时渲染文字在也对 Three.js 应用有很高的性能要求。因此在这个例子里，我们创建 DOM 节点来生成动态标签，用 CSS 控制它的动画和位置。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">let</span> label = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'map-label'</span>);\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getPoint2ScreenCoord</span>(<span class=\"hljs-params\">target</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> mat = <span class=\"hljs-keyword\">new</span> THREE.Matrix4();\n  <span class=\"hljs-keyword\">let</span> wHeight = <span class=\"hljs-built_in\">window</span>.innerHeight;\n  <span class=\"hljs-keyword\">let</span> wWidth = <span class=\"hljs-built_in\">window</span>.innerWidth;\n  <span class=\"hljs-comment\">// WebGL 视口坐标系转换为屏幕坐标系的矩阵</span>\n  mat.set(\n    wWidth / <span class=\"hljs-number\">2</span>,\n    <span class=\"hljs-number\">0</span>,\n    <span class=\"hljs-number\">0</span>,\n    wWidth / <span class=\"hljs-number\">2</span>,\n    <span class=\"hljs-number\">0</span>,\n    -wHeight / <span class=\"hljs-number\">2</span>,\n    <span class=\"hljs-number\">0</span>,\n    wHeight / <span class=\"hljs-number\">2</span>,\n    <span class=\"hljs-number\">0</span>,\n    <span class=\"hljs-number\">0</span>,\n    <span class=\"hljs-number\">1</span>,\n    <span class=\"hljs-number\">0</span>,\n    <span class=\"hljs-number\">0</span>,\n    <span class=\"hljs-number\">0</span>,\n    <span class=\"hljs-number\">0</span>,\n    <span class=\"hljs-number\">1</span>\n  );\n\n  <span class=\"hljs-comment\">// 中心点相对目标3D形状坐标 -&gt; 世界坐标 -&gt; 屏幕坐标</span>\n  <span class=\"hljs-keyword\">let</span> centroid = target.userData.centroid;\n  <span class=\"hljs-keyword\">let</span> pos = target.localToWorld(<span class=\"hljs-keyword\">new</span> THREE.Vector3(centroid[<span class=\"hljs-number\">0</span>], centroid[<span class=\"hljs-number\">1</span>], <span class=\"hljs-number\">0</span>));\n  <span class=\"hljs-keyword\">let</span> { x, y } = pos.project(camera).applyMatrix4(mat);\n\n  label.style.left = x + <span class=\"hljs-string\">'px'</span>;\n  label.style.top = y + <span class=\"hljs-string\">'px'</span>;\n  label.style.opacity = <span class=\"hljs-number\">1</span>;\n  label.textContent = selectedObject.userData.name;\n}\n</code></pre>\n<p><img src=\"/images/generate-3d-map-with-geojson/centroid.png\" alt=\"centroid\">之前储存在 <code>userData</code> 里的 \b<code>centroid</code> 数组在打点时就派上用场啦。如图，它的数值是 <code>[相对x, 相对y]</code>，将相对坐标转换为世界坐标后再映射到屏幕坐标，将 x 和 y 分别赋予绝对定位 DOM 元素的 <code>left</code> 和 <code>top</code> 样式即可。</p>\n<p>到这里，我们就通过 Geojson 数据，一步一步生成了一个可交互的 Three.js 立体地理区域图~撒花~~~٩(˃̶͈̀௰˂̶͈́)و</p>\n<h2>最后的一点碎碎念</h2>\n<p>虽然说现在市面上 Echarts 或者其他可视化组件库都能通过配置直接生成这种行政区域图，然而大屏本质上作为展示数据的<em>静态</em>页面（弱交互、定制化高），为了生成某一个省市而引入庞大的第三方库貌似在打包体积和性能上得不偿失啊……再者，高度定制化的特点使得第三方库的配置项未必能满足所有设计原型，因此才有这个从最基础 geojson 数据搭建组件的想法。</p>\n<p>\b 借这篇 po 来记录造轮子的的思考过程之余，其实也收获了不少可视化开发的通用技巧，如</p>\n<ul>\n<li>使用 d3threeD 将通用 SVG 路径转换为 Three.js <code>ShapePath / Shape</code> 后，可进一步生成其他网格</li>\n<li>\b 矩阵变换的使用，包括普通形变和从 Three.js 场景坐标轴到屏幕坐标轴的映射</li>\n</ul>\n<p>按你胃，造这个轮子的过程真的踩了很多坑，包括上面提到的纵轴相反的转换和动态拉伸长度。往往这些瓶颈只要逆向思考一下就能找到非常规的实现方法，真的锻炼个人解决问题的思维，推着自己 think out of the box，也是蛮受益匪浅的，因为这个 3D 地图和之前项目里开发的 3D 地球，打开了 GIS 新世界的大门，了解了很多地理信息学的概念和算法，也夯实了 WebGL 基础（其实更多是 Three.js 的 API 啦哈哈哈哈），大概下一篇就会介绍扒瓦片的血泪之路吧【。</p>\n"}