{"meta":{"title":"run-once-plugin原理解析：绕过webpack配置直接操作plugin的加载和卸载","tags":["webpack","optimization"],"categories":["JavaScript"],"date":"2018-01-10 19:08:31"},"content":"<h2>前言</h2>\n<p>在开发环境下，通常在使用 webpack 在简单的 watch 模式下监听文件内容变化重新编译代码的时候，webpack 将整个项目内匹配到的文件全部重新编译一遍，这就导致所有通过配置文件设置的 loader 和 plugin 需要重新执行来生成新代码。然而当项目本身比较小型时，类似于 HtmlWebpackPlugin 这种只需执行一次便可得出需要的文件，在 watch 下反复执行会大大降低每次编译的速度。然而，webpack 本身并没有可以操作 plugin 的加载和卸载时机的配置项，想要在 webpack 执行过程中手动卸载已执行过一次的插件的话，只能通过另外再写一个插件来实现了。</p>\n<p>&lt;!-- more --&gt;</p>\n<blockquote>\n<p>然而当你已经开始为项目引进前端路由或状态管理库时，说明项目已经发展到不适合在开发时只用 webpack 的 watch 模式来监听文件变化了。每次改动都带来全量的编译，需要再次分析文件之间的依赖、打包、合并代码，对比起 webpack-dev-server 的热更新，这种方法未免显得太原始且浪费时间。</p>\n</blockquote>\n<p>run-once-plugin 本身是一个 webpack 的插件，它可以被视为其他插件的<strong>中介</strong>：它接受一组只需运行一次的插件，在 webpack 初始化记录即将被加载的插件钩子函数，并手动将其加入 webpack 的插件集合中；一轮编译过后，立刻从钩子 handlers 中删除之前记录的钩子函数，达到只运行一次的目的。因此，我们需要分析 webpack 插件加载的运行机制，以及编译时生成的 <code>compiler</code> 对象。如果想要了解 webpack 整个执行过程，可以参考淘宝 FED 的这篇文章 <strong><a href=\"http://taobaofed.org/blog/2016/09/09/webpack-flow/\">细说 webpack 之流程篇</a></strong>。</p>\n<p>插件的代码 Repo: <a href=\"https://github.com/jacelynfish/run-once-plugin\">https://github.com/jacelynfish/run-once-plugin</a>\nnpm: <a href=\"https://www.npmjs.com/package/run-once-plugin\">https://www.npmjs.com/package/run-once-plugin</a></p>\n<h2>webpack 插件的加载</h2>\n<h3>核心模型</h3>\n<p>初始化 webpack 对象其实是创建一个核心的 <code>Compiler</code> 对象，并往其中注入各种插件的钩子函数。<code>Compiler</code> 类是 <code>Tapable</code> 类的子类，其核心就是一个 PubSub 模型：<code>Compiler</code>注册了控制 webpack 运行流程的所有钩子，如<code>make</code>, <code>compile</code>, <code>emit</code>, <code>after-emit</code>等，并将各种插件的钩子函数注册到相应的钩子下。在运行过程中的不同时期，通过调用<code>compiler.applyPlugins</code>, <code>compiler.applyPluginsParallel</code>, <code>compiler.applyPluginsAsyncWaterfall</code>等函数，以同步或异步的方法调用已注册的钩子函数。</p>\n<p>而 <code>Tapable</code> 这个构造函数只是简单地声明了一个私有对象集合 <code>this._plugins</code> 来管理已注册的钩子函数。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// tapable/lib/Tapable.js</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Tapable</span>(<span class=\"hljs-params\"></span>) </span>{\n\t<span class=\"hljs-keyword\">this</span>._plugins = {};\n}\n\n<span class=\"hljs-comment\">// ......</span>\n\n<span class=\"hljs-comment\">// 调用已注册的钩子函数</span>\nTapable.prototype.applyPlugins = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">applyPlugins</span>(<span class=\"hljs-params\">name</span>) </span>{\n\t<span class=\"hljs-keyword\">if</span>(!<span class=\"hljs-keyword\">this</span>._plugins[name]) <span class=\"hljs-keyword\">return</span>;\n\t<span class=\"hljs-keyword\">var</span> args = <span class=\"hljs-built_in\">Array</span>.prototype.slice.call(<span class=\"hljs-built_in\">arguments</span>, <span class=\"hljs-number\">1</span>);\n\t<span class=\"hljs-keyword\">var</span> plugins = <span class=\"hljs-keyword\">this</span>._plugins[name];\n\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; plugins.length; i++)\n\t\tplugins[i].apply(<span class=\"hljs-keyword\">this</span>, args);\n};\n\n<span class=\"hljs-comment\">// 为不同钩子注册钩子函数</span>\nTapable.prototype.plugin = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">plugin</span>(<span class=\"hljs-params\">name, fn</span>) </span>{\n\t<span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">Array</span>.isArray(name)) {\n\t\tname.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">name</span>) </span>{\n\t\t\t<span class=\"hljs-keyword\">this</span>.plugin(name, fn);\n\t\t}, <span class=\"hljs-keyword\">this</span>);\n\t\t<span class=\"hljs-keyword\">return</span>;\n\t}\n\t<span class=\"hljs-keyword\">if</span>(!<span class=\"hljs-keyword\">this</span>._plugins[name]) <span class=\"hljs-keyword\">this</span>._plugins[name] = [fn];\n\t<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">this</span>._plugins[name].push(fn);\n};\n\n<span class=\"hljs-comment\">// 调用插件 -&gt; 调用钩子函数注册过程</span>\nTapable.prototype.apply = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">apply</span>(<span class=\"hljs-params\"></span>) </span>{\n\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">arguments</span>.length; i++) {\n\t\t<span class=\"hljs-built_in\">arguments</span>[i].apply(<span class=\"hljs-keyword\">this</span>);\n\t}\n};\n\n<span class=\"hljs-built_in\">module</span>.exports = Tapable;\n</code></pre>\n<p>由此可见，webpack 的大部分功能都是由各种小插件集合而成，插件的集合只是简单的 key-val pair 对象，每次钩子被调用时，遍历调动相应的钩子函数数组便可执行各个插件的功能。</p>\n<h3>插件加载</h3>\n<p>在将用户通过 <code>webpack.config.js</code> 或其他配置文件传入的选项整合入 <code>options</code> 后，<code>webpack/lib/webpack.js</code> 被调用来创建 <code>compiler</code> 对象，并开始编译和构建的流程。在这个过程中插件被初始化：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// webpack/lib/webpack.js</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">webpack</span>(<span class=\"hljs-params\">options, callback</span>) </span>{\n\t<span class=\"hljs-comment\">//......</span>\n\t<span class=\"hljs-keyword\">let</span> compiler;\n\t<span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">Array</span>.isArray(options)) {\n\t\tcompiler = <span class=\"hljs-keyword\">new</span> MultiCompiler(options.map(<span class=\"hljs-function\"><span class=\"hljs-params\">options</span> =&gt;</span> webpack(options)));\n\t} <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">typeof</span> options === <span class=\"hljs-string\">\"object\"</span>) {\n\t\t<span class=\"hljs-comment\">//......</span>\n\t\t<span class=\"hljs-comment\">// 初始化 Compiler 对象</span>\n\t\tcompiler = <span class=\"hljs-keyword\">new</span> Compiler();\n\t\tcompiler.context = options.context;\n\t\tcompiler.options = options;\n\t\t<span class=\"hljs-keyword\">new</span> NodeEnvironmentPlugin().apply(compiler);\n\n        <span class=\"hljs-comment\">// 遍历整合后 otpions的插件列表，逐一调用插件，获取并注册插件里的钩子函数</span>\n\t\t<span class=\"hljs-keyword\">if</span>(options.plugins &amp;&amp; <span class=\"hljs-built_in\">Array</span>.isArray(options.plugins)) {\n\t\t\tcompiler.apply.apply(compiler, options.plugins);\n\t\t}\n\n        <span class=\"hljs-comment\">// 调用\"environment\"和\"after-environment\"的钩子函数</span>\n\t\tcompiler.applyPlugins(<span class=\"hljs-string\">\"environment\"</span>);\n\t\tcompiler.applyPlugins(<span class=\"hljs-string\">\"after-environment\"</span>);\n\t\tcompiler.options = <span class=\"hljs-keyword\">new</span> WebpackOptionsApply().process(options, compiler);\n\t} <span class=\"hljs-keyword\">else</span> {\n\t\t<span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">\"Invalid argument: options\"</span>);\n\t}\n\t<span class=\"hljs-keyword\">if</span>(callback) {\n        <span class=\"hljs-comment\">// 检测是否 watch 模式</span>\n        <span class=\"hljs-comment\">//......</span>\n\n        <span class=\"hljs-comment\">// 开始构建和编译</span>\n\t\tcompiler.run(callback);\n\t}\n\t<span class=\"hljs-keyword\">return</span> compiler;\n}\nexports = <span class=\"hljs-built_in\">module</span>.exports = webpack;\n</code></pre>\n<p>在 watch 模式下，webpack 监听文件系统；当变化发生时，调用在 <code>watch-run</code> 钩子下的函数。然而这整个重新编译的过程使用的都是 <strong>webpack 初始化时所创建的那个 <code>compiler</code> 实例</strong>，所有 plugin 都是在初始化时已被加载进 <code>compiler</code> 的插件集合中，且并没有可以直接操纵私有插件集合的公有 API。因此，要是想在 webpack 运行过程中手动卸载部分插件，只能记录已安装的钩子函数，并在适当的钩子中把它们从从插件集合中删除。</p>\n<h2>插件源码解析</h2>\n<p>run-once-plugin 给两个钩子注册了钩子函数：<code>environment</code> 和 <code>after-emit</code>。它作为一个普通的插件，它的钩子函数也会在 <code>compiler.apply.apply(compiler, options.plugins);</code> 里被正常注册。</p>\n<h3>加载</h3>\n<p>由于 <code>environment</code> 是插件注册流程结束后第一个被调用的钩子，在 <code>environment</code> 钩子函数执行时，其他插件的钩子函数都已就位，而传给 run-once-plugin 的插件数组在注册前后，需要经过一下几个步骤：</p>\n<ol>\n<li>确认该钩子函数是第一次运行</li>\n<li>遍历传入 run-once-plugin 的插件数组：\n<ul>\n<li>记录该插件注册钩子函数之前，<code>compiler</code> 对象中的插件集合为 <code>before</code></li>\n<li>注册该插件的钩子函数</li>\n<li>记录插件注册结束后 <code>compiler</code> 对象中的插件集合为 <code>after</code></li>\n<li>对比 <code>before</code> 和 <code>after</code>，获得该插件所有的钩子函数，将它们保存到私有对象 <code>this.additionalEnv</code> 中</li>\n</ul>\n</li>\n</ol>\n<pre class=\"hljs\"><code>compiler.plugin(\n    <span class=\"hljs-string\">'environment'</span>,\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">environmentEvent</span>(<span class=\"hljs-params\">compilation, callback</span>) </span>{\n        <span class=\"hljs-comment\">// 确保该钩子函数第一次运行</span>\n        <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-keyword\">this</span>._isRunned) {\n            <span class=\"hljs-keyword\">this</span>.pluginList.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> {\n                <span class=\"hljs-keyword\">let</span> { plugin, option } = item;\n                item.additionalEnv = {};\n                <span class=\"hljs-keyword\">let</span> before, after;\n                <span class=\"hljs-comment\">// 保存 compiler 中插件集合在该插件注册前和注册后的状态</span>\n                before = deepClone(compiler._plugins);\n                compiler.apply.apply(compiler, [<span class=\"hljs-keyword\">new</span> plugin(option)]);\n                after = deepClone(compiler._plugins);\n\n                <span class=\"hljs-comment\">// 对比 before 和 after，记录该插件新注册的钩子函数</span>\n                <span class=\"hljs-built_in\">Object</span>.keys(after).forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">key</span> =&gt;</span> {\n                    <span class=\"hljs-keyword\">if</span> (!before.hasOwnProperty(key)) {\n                        item.additionalEnv[key] = traverseArray(\n                            [],\n                            after[key]\n                        );\n                    } <span class=\"hljs-keyword\">else</span> {\n                        item.additionalEnv[key] = traverseArray(\n                            item.additionalEnv[key]\n                                ? item.additionalEnv[key]\n                                : before[key],\n                            after[key],\n                            key\n                        );\n                    }\n                });\n            });\n        }\n    }.bind(<span class=\"hljs-keyword\">this</span>)\n);\n</code></pre>\n<h3>卸载</h3>\n<p>由于 <code>after-emit</code> 是整个编译流程中每次构建时最后一个被调用的钩子，在这里把已经运行过一次的插件从 <code>compiler</code> 的插件集合中卸载是个比较保守的选择。卸载的过程非常简单：首先将私有变量 <code>this._isRunned</code> 标记为 <code>true</code>，防止加载一次性插件的逻辑在下一轮 watch 中再次进行；然后对比 <code>compiler._plugins</code> 和已记录的 <code>this.additionalEnv</code>，并在删除 <code>compiler._plugins</code> 中删除记录在 <code>this.additionalEnv</code> 中的所有插件钩子函数。当这个过程完成之后，如被监听的文件发生改变，在下一轮 watch 的编译和构建时，<code>compiler</code> 中已经没有了之前注册的一次性插件。</p>\n<pre class=\"hljs\"><code>compiler.plugin(\n    <span class=\"hljs-string\">'after-emit'</span>,\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">afterCompileEvent</span>(<span class=\"hljs-params\">compilation, cb</span>) </span>{\n        <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-keyword\">this</span>._isRunned) {\n            <span class=\"hljs-keyword\">this</span>._isRunned = <span class=\"hljs-literal\">true</span>;\n            <span class=\"hljs-keyword\">let</span> compilerPlugins = compiler._plugins;\n\n            <span class=\"hljs-comment\">// 在 compiler 中删除一次性插件的钩子函数</span>\n            <span class=\"hljs-keyword\">this</span>.pluginList.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> {\n                <span class=\"hljs-keyword\">let</span> plugins = item.additionalEnv;\n                <span class=\"hljs-built_in\">Object</span>.keys(plugins).forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">key</span> =&gt;</span> {\n                    <span class=\"hljs-keyword\">if</span> (plugins[key].length) {\n                        <span class=\"hljs-keyword\">let</span> comp = compilerPlugins[key];\n                        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> fn <span class=\"hljs-keyword\">of</span> plugins[key]) {\n                            <span class=\"hljs-keyword\">var</span> pos = comp.indexOf(fn);\n                            <span class=\"hljs-keyword\">if</span> (pos != <span class=\"hljs-number\">-1</span>) comp.splice(pos, <span class=\"hljs-number\">1</span>);\n                        }\n                    }\n                });\n            });\n        }\n        cb();\n    }.bind(<span class=\"hljs-keyword\">this</span>)\n);\n</code></pre>\n<h2>吐槽与展望</h2>\n<p>由于 webpack 文档实在太简单粗暴，直接一句【你们去看源码吧】打发走想开发插件的人，没有办法为了写个插件硬着头皮把 webpack 的源码大致撸了一遍（其实只是弄懂大概流程（。一开始方向不太对，还是踩了一些坑。其实一开始的思路是，在加载阶段 new 一个 <code>subCompiler</code> 实例，然后调用 <code>runAsChild</code> 作为一个单独的 <code>compiler</code> 单独运行一次传进来的插件。下场当然是被各种 context 和 option 虐 QAQ。其实是直接操作数组的方法太简单所以一开始觉得可能真的没这么简单【所以就折腾了一整天【【。而且这里两个对象的深对比还是暴力地 n^2，也没有用其他库，觉得之后这里还是可以优化一下的吧~\n按你胃，反正最后项目还是用回了 webpack-dev-server 让它热更了哈哈哈哈，这个小插件就当做一次练手和看 webpack 源码的借口吧 (๑•̀ ㅂ•́)و✧</p>\n<h2>相关阅读</h2>\n<ul>\n<li><a href=\"https://webpack.js.org/contribute/writing-a-plugin/\">Writing a Plugin</a> - webpack 官方文档</li>\n<li><a href=\"http://taobaofed.org/blog/2016/09/09/webpack-flow/\">细说 webpack 之流程篇</a> - 淘宝前端团队</li>\n</ul>\n"}